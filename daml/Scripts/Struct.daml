module Scripts.Struct where

import Daml.Script
import DA.Map qualified as M

import DA.Date (subtractDays, addDays, toDateUTC)
import Daml.Finance.Interface.Types.Common.Types (Id(..), InstrumentKey, Parties)
import Daml.Finance.Instrument.Token.Instrument (Instrument(..))
import Daml.Finance.Instrument.Generic.Instrument qualified as Generic (Instrument(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (GetView(..), I, Reference(..))
import DA.Set (toList, empty, singleton)
import Daml.Finance.Interface.Claims.Types (C)
import Daml.Finance.Claims.Lifecycle.Rule (Rule(..))
import Daml.Finance.Interface.Types.Date.Classes (toUTCTime)
import Scripts.RC (RC(..))
import DA.Time (time)
import Daml.Finance.Data.Numeric.Observation (Observation(..))
import Daml.Finance.Interface.Lifecycle.Observable.NumericObservable qualified as NumericObservable (I)
import DA.Math qualified as Math
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle (I, Evolve(..))
import Daml.Finance.Interface.Lifecycle.Effect qualified as Effect (I)
import Daml.Finance.Data.Time.DateClock (DateClock(..))
import Daml.Finance.Data.Time.DateClock.Types (Unit(..))
import Daml.Finance.Data.Time.DateClockUpdate (DateClockUpdateEvent(..))
import Daml.Finance.Interface.Lifecycle.Event qualified as Event (I)

-- | Create parties
createParties : [Text] -> Script [Party]
createParties names = mapA createParty names where
    createParty name = allocatePartyWithHint name $ PartyIdHint name

-- | Create a `Reference` for an instrument.
-- Note: This should only be called together with an instrument creation
createReference : ContractId Instrument.I -> Party -> Party -> [(Text, Parties)] ->
  Script InstrumentKey
createReference cid depository issuer observers = do
    instrumentView <- submitMulti [depository, issuer] [] do
        exerciseCmd cid Instrument.GetView with viewer = issuer
    let ref = Instrument.Reference with instrumentView; cid; observers = M.fromList observers
    submitMulti [depository, issuer] [] do createCmd ref
    pure $ key ref

-- | Originate an `Instrument`.
originate : Party -> Party -> Text -> Text-> [(Text, Parties)] -> Time -> Script InstrumentKey
originate depository issuer label description observers timestamp = do
  cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
    createCmd Instrument with
      depository; issuer; id = Id label; version = "0"; description
      observers = M.fromList observers; validAsOf = timestamp
  createReference cid depository issuer observers

originateEquity : Party -> Party -> Text -> Text -> Text -> [(Text, Parties)] -> Time ->
  Script InstrumentKey
originateEquity depository issuer label version description observers timestamp = do
  cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
    createCmd Instrument with
      depository; issuer; id = Id label; version; description
      observers = M.fromList observers; validAsOf = timestamp
  createReference cid depository issuer observers

-- | Originate generic instrument
originateGeneric : Party -> Party -> Text -> Text -> Time -> C -> [(Text, Parties)] -> Time ->
  Script InstrumentKey
originateGeneric depository issuer label description acquisitionTime claims observers
    lastEventTimestamp = do
        cid <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
          createCmd Generic.Instrument with
            depository; issuer; id = Id label; version = "0"; description; acquisitionTime; claims
            observers = M.fromList observers; lastEventTimestamp
        createReference cid depository issuer observers

-- | Maps a `Date` to `Time` using the rule in the `DateClock`.
dateToDateClockTime : Date -> Time
dateToDateClockTime = toUTCTime . Unit

-- | Given a `Date`, it creates a `DateClockUpdateEvent`.
createClockUpdateEvent : Parties -> Date -> Parties
  -> Script (ContractId Event.I)
createClockUpdateEvent providers today observers = do
  let
    description = show today
    id = Id description
    date = Unit today
    clock = DateClock with providers; date; id; description; observers
  eventCid <- toInterfaceContractId <$> submitMulti (toList providers) [] do
    createCmd DateClockUpdateEvent with
      providers; id; description; date = today; observers; eventTime = toUTCTime date
  pure eventCid

-- | Lifecycle the instrument as of this date.
lifecycleInstrument : [Party] -> Date -> InstrumentKey -> Party ->
  [ContractId NumericObservable.I] -> Script (Optional InstrumentKey, [ContractId Effect.I])
lifecycleInstrument readAs today instrument issuer observableCids = do
    -- create clock update event
    clockEventCid <- createClockUpdateEvent (singleton issuer) today empty

    -- Create a lifecycle rule
    lifecycleRuleCid : ContractId Lifecycle.I <- toInterfaceContractId <$> submit issuer do
        createCmd Rule with
            providers = singleton issuer
            observers= M.empty
            lifecycler = issuer
            id = Id "LifecycleRule"
            description = "Rule to lifecycle RC instruments"

    -- Try to lifecycle instrument
    (lifecycleCid, effectCids) <- submitMulti [issuer] readAs do 
        exerciseCmd lifecycleRuleCid Lifecycle.Evolve with 
            eventCid = clockEventCid
            observableCids
            instrument

    pure (lifecycleCid, effectCids)

-- | Verify a that there are no lifecycle effects of the instrument on this date.
verifyNoLifecycleEffects : [Party] -> Date -> InstrumentKey -> Party ->
  [ContractId NumericObservable.I] -> Script ()
verifyNoLifecycleEffects readAs today instrument issuer observableCids = do
  (bondLifecycleCid2, effectCids) <- lifecycleInstrument readAs today instrument issuer observableCids
  assertMsg ("There should be no lifecycle effects on " <> show today) (null effectCids)

runStruct : Script ()
runStruct = do

    [depository, custodian, issuer, investor, calendarDataProvider, publicParty] <-
        createParties ["Depository", "Custodian", "Issuer", "Investor", "Calendar Data Provider", "PublicParty"]
    let pp = [("FactoryProvider", singleton publicParty)]

    now <- getTime
    let ticker = "ABC.DE"
    cashInstrument <- originate depository issuer "EUR" "Euro" pp now
    underlying <- originateEquity issuer issuer ticker "0" ticker pp now

    let
        duration = 180
        today = toDateUTC now
        maturity = addDays today duration
        coupon = 0.1
        initialPrice = 100.0
        knockIn = 0.8
        structLabel = "RC " <> ticker <> " " <> show (coupon * 100.0) <> "% " <> show maturity <> " DA"
        observations = M.fromList $ map (\i -> 
            (dateToDateClockTime (addDays today i), sin' i)) 
            [1..duration]
            where sin' i = initialPrice + Math.sin(intToDecimal i) * initialPrice * (1.1-knockIn)
        
    debug today
    debug maturity
    debug observations

    observableCid: ContractId NumericObservable.I <- toInterfaceContractId <$> submit issuer do
        createCmd Observation with
            provider = issuer; id = Id ticker; observations; observers = M.empty

    -- Alternatively one could use the generic instrument
    -- instrument <- originateGeneric depository issuer structLabel "Struct" now claims pp now
    rcCid : ContractId Instrument.I <- toInterfaceContractId <$> submitMulti [depository, issuer] [] do
        createCmd RC with 
            depository = depository
                , issuer = issuer
                , id = Id structLabel
                , version = "0"
                , description = structLabel
                , observers = M.fromList pp
                , validAsOf = time today 0 0 0
                , acquisitionTime = time today 0 0 0
                , cashInstrument = cashInstrument
                , underlying = underlying
                , ticker = ticker
                , initialPrice = initialPrice
                , knockIn = knockIn
                , maturity = maturity
                , coupon = coupon
                , lastEventTimestamp = time today 0 0 0
    
    rc <- createReference rcCid depository issuer pp

    -- Try to lifecycle and verify that there are no lifecycle effects.
    verifyNoLifecycleEffects [publicParty] (subtractDays maturity 1) rc issuer [observableCid]
        
    return ()